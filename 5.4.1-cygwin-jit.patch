--- origsrc/qtdeclarative-opensource-src-5.4.1/src/3rdparty/masm/wtf/Platform.h	2015-02-16 22:57:29.000000000 -0600
+++ src/qtdeclarative-opensource-src-5.4.1/src/3rdparty/masm/wtf/Platform.h	2015-04-15 01:18:27.564223900 -0500
@@ -333,6 +333,11 @@
 #define WTF_OS_AIX 1
 #endif
 
+/* OS(CYGWIN) - Cygwin */
+#ifdef __CYGWIN__
+#define WTF_OS_CYGWIN 1
+#endif
+
 /* OS(DARWIN) - Any Darwin-based OS, including Mac OS X and iPhone OS */
 #ifdef __APPLE__
 #define WTF_OS_DARWIN 1
@@ -420,6 +425,7 @@
 
 /* OS(UNIX) - Any Unix-like system */
 #if   OS(AIX)              \
+    || OS(CYGWIN)           \
     || OS(DARWIN)           \
     || OS(FREEBSD)          \
     || OS(HURD)             \
@@ -869,7 +875,7 @@
 /* Pick which allocator to use; we only need an executable allocator if the assembler is compiled in.
    On x86-64 we use a single fixed mmap, on other platforms we mmap on demand. */
 #if ENABLE(ASSEMBLER)
-#if CPU(X86_64) && !OS(WINDOWS) || PLATFORM(IOS)
+#if CPU(X86_64) && !OS(WINDOWS) && !OS(CYGWIN) || PLATFORM(IOS)
 #define ENABLE_EXECUTABLE_ALLOCATOR_FIXED 1
 #else
 #define ENABLE_EXECUTABLE_ALLOCATOR_DEMAND 1
--- origsrc/qtdeclarative-opensource-src-5.4.1/src/3rdparty/masm/yarr/YarrJIT.cpp	2015-02-16 22:57:28.000000000 -0600
+++ src/qtdeclarative-opensource-src-5.4.1/src/3rdparty/masm/yarr/YarrJIT.cpp	2015-04-15 01:19:42.745770800 -0500
@@ -87,7 +87,7 @@ class YarrGenerator : private MacroAssem
     static const RegisterID returnRegister = X86Registers::eax;
     static const RegisterID returnRegister2 = X86Registers::edx;
 #elif CPU(X86_64)
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(CYGWIN)
     static const RegisterID input = X86Registers::edi;
     static const RegisterID index = X86Registers::esi;
     static const RegisterID length = X86Registers::edx;
@@ -2532,7 +2532,7 @@ class YarrGenerator : private MacroAssem
         // The ABI doesn't guarantee the upper bits are zero on unsigned arguments, so clear them ourselves.
         zeroExtend32ToPtr(index, index);
         zeroExtend32ToPtr(length, length);
-#if OS(WINDOWS)
+#if OS(WINDOWS) || OS(CYGWIN)
         if (compileMode == IncludeSubpatterns)
             loadPtr(Address(X86Registers::ebp, 6 * sizeof(void*)), output);
 #endif
@@ -2575,7 +2575,7 @@ class YarrGenerator : private MacroAssem
     void generateReturn()
     {
 #if CPU(X86_64)
-#if OS(WINDOWS)
+#if OS(WINDOWS) || OS(CYGWIN)
         // Store the return value in the allocated space pointed by rcx.
         store64(returnRegister, Address(X86Registers::ecx));
         store64(returnRegister2, Address(X86Registers::ecx, sizeof(void*)));
--- origsrc/qtdeclarative-opensource-src-5.4.1/src/qml/jit/qv4assembler_p.h	2015-02-16 22:57:27.000000000 -0600
+++ src/qtdeclarative-opensource-src-5.4.1/src/qml/jit/qv4assembler_p.h	2015-04-15 01:20:45.112690400 -0500
@@ -819,7 +819,7 @@ public:
         if (argumentNumber < RegisterArgumentCount)
             loadArgumentInRegister(value, registerForArgument(argumentNumber), argumentNumber);
         else
-#if OS(WINDOWS) && CPU(X86_64)
+#if (OS(WINDOWS) || OS(CYGWIN)) && CPU(X86_64)
             loadArgumentOnStack<argumentNumber>(value, argumentNumber);
 #else // Sanity:
             loadArgumentOnStack<argumentNumber - RegisterArgumentCount>(value, argumentNumber);
--- origsrc/qtdeclarative-opensource-src-5.4.1/src/qml/jit/qv4targetplatform_p.h	2015-02-16 22:57:27.000000000 -0600
+++ src/qtdeclarative-opensource-src-5.4.1/src/qml/jit/qv4targetplatform_p.h	2015-04-15 01:21:47.962171300 -0500
@@ -65,7 +65,7 @@ namespace JIT {
 class TargetPlatform
 {
 public:
-#if CPU(X86) && (OS(LINUX) || OS(WINDOWS) || OS(QNX) || OS(FREEBSD))
+#if CPU(X86) && (OS(LINUX) || OS(WINDOWS) || OS(CYGWIN) || OS(QNX) || OS(FREEBSD))
     enum { RegAllocIsSupported = 1 };
 
     static const JSC::MacroAssembler::RegisterID StackFrameRegister   = JSC::X86Registers::ebp;
@@ -108,7 +108,7 @@ public:
     static void platformEnterStandardStackFrame(JSC::MacroAssembler *as) { Q_UNUSED(as); }
     static void platformLeaveStandardStackFrame(JSC::MacroAssembler *as) { Q_UNUSED(as); }
 
-#if OS(WINDOWS) || OS(QNX) || \
+#if OS(WINDOWS) || OS(CYGWIN) || OS(QNX) || \
     ((OS(LINUX) || OS(FREEBSD)) && (defined(__PIC__) || defined(__PIE__)))
 
 #define RESTORE_EBX_ON_CALL
@@ -196,7 +196,7 @@ public:
     static void platformLeaveStandardStackFrame(JSC::MacroAssembler *as) { Q_UNUSED(as); }
 #endif // Linux/MacOS on x86_64
 
-#if CPU(X86_64) && OS(WINDOWS)
+#if CPU(X86_64) && (OS(WINDOWS) || OS(CYGWIN))
     // Register allocation is not (yet) supported on win64, because the ABI related stack handling
     // is not completely implemented. Specifically, the saving of xmm registers, and the saving of
     // incoming function parameters to the shadow space is missing.
